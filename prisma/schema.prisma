generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  phone        String?
  updatedAt    DateTime      @updatedAt
  bookings     Booking[]
  reviews      Review[]
  transactions Transaction[]
  vehicles     Vehicle[]
}

model Booking {
  id            String                 @id @default(uuid())
  userId        String
  date          DateTime
  location      String
  status        String                 @default("pending")
  createdAt     DateTime               @default(now())
  notes         String?
  serviceId     String
  timeSlot      String
  updatedAt     DateTime               @updatedAt
  vehicleId     String?
  service       Service                @relation(fields: [serviceId], references: [id])
  user          User                   @relation(fields: [userId], references: [id])
  vehicle       Vehicle?               @relation(fields: [vehicleId], references: [id])
  statusHistory BookingStatusHistory[]
  review        Review?
  transaction   Transaction?
}

model Service {
  id          String    @id @default(uuid())
  name        String
  description String
  price       Int
  createdAt   DateTime  @default(now())
  duration    Int
  isActive    Boolean   @default(true)
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
}

model Transaction {
  id           String    @id @default(uuid())
  userId       String
  bookingId    String    @unique
  amount       Int
  method       String
  status       String
  createdAt    DateTime  @default(now())
  paidAt       DateTime?
  paymentProof String?
  updatedAt    DateTime  @updatedAt
  booking      Booking   @relation(fields: [bookingId], references: [id])
  user         User      @relation(fields: [userId], references: [id])
}

model Vehicle {
  id          String    @id @default(uuid())
  userId      String
  brand       String
  model       String
  year        Int
  color       String
  plateNumber String    @unique
  vehicleType String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bookings    Booking[]
  user        User      @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  bookingId String   @unique
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model BookingStatusHistory {
  id        String   @id @default(uuid())
  bookingId String
  status    String
  notes     String?
  createdAt DateTime @default(now())
  booking   Booking  @relation(fields: [bookingId], references: [id])
}
